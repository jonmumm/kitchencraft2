name: 'Storybook Tests'
on: push
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install
          npm install @rollup/rollup-linux-x64-gnu @rollup/rollup-linux-x64-musl --save-optional
          npm install @swc/core-linux-x64-gnu @swc/core-linux-x64-musl --save-optional
          npm install @esbuild/linux-x64 --save-optional
          npm rebuild rollup @swc/core esbuild
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Build and Test Storybook
        env:
          DEBUG_PRINT_LIMIT: 10000
          NODE_ENV: production
        run: |
          ROLLUP_NATIVE_PATH="$(pwd)/node_modules/@rollup/rollup-linux-x64-gnu/rollup.linux-x64-gnu.node" npm run build-storybook --quiet
          mkdir -p coverage/storybook
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue" \
            "npx http-server storybook-static --port 6006 --silent" \
            "npx wait-on tcp:127.0.0.1:6006 && npm run test-storybook -- --maxWorkers=2 --testTimeout=60000 --coverage --coverageDirectory=coverage/storybook"

      - name: Upload coverage reports to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          directory: coverage/storybook/
          flags: storybook
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
        
      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: storybook-coverage
          path: coverage/storybook/
          if-no-files-found: warn

      - name: Generate Coverage Badge
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/storybook/coverage-summary.json', 'utf8'));
            const percentage = coverage.total.statements.pct;
            
            const badgeColor = percentage > 80 ? 'green' 
              : percentage > 60 ? 'yellow'
              : 'red';
            
            const badge = {
              schemaVersion: 1,
              label: 'coverage',
              message: `${percentage}%`,
              color: badgeColor
            };
            
            fs.writeFileSync('coverage-badge.json', JSON.stringify(badge));

      - name: Upload Coverage Badge
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage-badge.json